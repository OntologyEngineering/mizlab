package talkabout;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.*;
import java.lang.*;

/**
 * タイトル:
 * 説明:
 * 著作権:   Copyright (c) 2002
 * 会社名:
 * @author
 * @version 1.0
 */

public class DrawPanel
extends Panel
implements MouseListener, MouseMotionListener {
  BorderLayout borderLayout1 = new BorderLayout();
  Frame f = new Frame();
  //ClearDialog dlg;
  talkabout base;
  ControlPanel control;

  Vector nodes = new Vector();//ノードのベクター
  Vector edges = new Vector();//エッジのベクター
  Graphics g;

  public DrawPanel() {
    try {
      jbInit();
      base = new talkabout();
      base.drawpanel = this;

    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
  void jbInit() throws Exception {
    this.setFont(new java.awt.Font("SansSerif", 0, 12));
    this.setLayout(borderLayout1);
    addMouseListener(this);
    addMouseMotionListener(this);
  }

  public void mouseClicked(MouseEvent e) {

  }
  public void mousePressed(MouseEvent e) {
    //System.out.println("Mouse Pressed.");
    double x = e.getX();
    double y = e.getY();
    int selected_i = -1;

    for(int i = 0;i < nodes.size();i++){
      Node n = (Node)nodes.elementAt(i);
      if(n.on_node(x,y)){
        selected_i = i;
      }
      n.selected = false;
      nodes.setElementAt(n,i);
    }

    if(selected_i >= 0){
      Node n = (Node)nodes.elementAt(selected_i);
      n.selected = true;
      nodes.setElementAt(n,selected_i);


      control.btnArrow.setLabel("↓");
    }
    else{
      control.txtWord.setText("");
    }

    paint(getGraphics());



  }
  public void mouseReleased(MouseEvent e) {
    double x = e.getX();
    double y = e.getY();
    int selected_i = -1;
    for(int i = 0;i < nodes.size();i++){
      Node n = (Node)nodes.elementAt(i);
      if(n.on_node(x,y)){
        selected_i = i;
      }
      n.selected = false;
    }
    if(selected_i >= 0){
      Node n = (Node)nodes.elementAt(selected_i);
      n.selected = true;
      if(e.getX()<0){
        n.x = 0;
      }
      if(e.getX()>this.getSize().width){
        n.x = this.getSize().width;
      }
      if(e.getY()<0){
        n.y = 0;
      }
      if(e.getY()>this.getSize().height){
        n.y = this.getSize().height;
      }
      if(n.parent_no>=0){
        Node np = (Node)nodes.elementAt(control.getNodeIndex(n.parent_no));
        if(e.getY()<=np.y){
          n.y = np.y +40;
        }
      }
      if(n.child.size()!=0){
        double min_y = 1000;
        for(int i=0;i<n.child.size();i++){
          int child_no = Integer.parseInt((String)n.child.elementAt(i));
          Node nc = (Node)nodes.elementAt(control.getNodeIndex(child_no));
          if(nc.y<min_y){
            min_y = nc.y;
          }
        }
        if(e.getY()>=min_y){
          n.y = min_y - 40;
        }
      }

      nodes.setElementAt(n,selected_i);
      paint(getGraphics());
    }

  }
  public void mouseEntered(MouseEvent e) {

  }
  public void mouseExited(MouseEvent e) {

  }
  public void mouseDragged(MouseEvent e) {
    double x = e.getX();
    double y = e.getY();
    int selected_i = -1;

    for(int i = 0;i < nodes.size();i++){
      Node n = (Node)nodes.elementAt(i);
      if(n.on_node(x,y)){
        selected_i = i;
      }
      n.selected = false;
    }
    if(selected_i >= 0){
      Node n = (Node)nodes.elementAt(selected_i);
      n.selected = true;
      n.x = e.getX();
      n.y = e.getY();
      nodes.setElementAt(n,selected_i);
      paint(getGraphics());
    }

  }
  public void mouseMoved(MouseEvent e) {

  }

  final Color selectColor = Color.red;
  final Color nodeColor = new Color(250, 220, 100);
  //描画
  public void paint(Graphics g){
    FontMetrics fm = g.getFontMetrics();
    Dimension panelSize = this.getSize();
    g.clearRect(0,0,panelSize.width,panelSize.height);

    //エッジの描画
      for(int j=0;j<edges.size();j++){
        Edge ed = (Edge)edges.elementAt(j);
        Node nf = (Node)nodes.elementAt(control.getNodeIndex(ed.from));
        Node nt = (Node)nodes.elementAt(control.getNodeIndex(ed.to));
        g.drawLine((int)nf.x,(int)nf.y,(int)nt.x,(int)nt.y);
      }

    //ノードの描画
    for(int i = 0;i < nodes.size();i++){
      Node n = (Node)nodes.elementAt(i);

      double w = fm.stringWidth(n.lbl)+10;
      double h = fm.getHeight()+5;
      n.x1 = n.x - w/2;
      n.y1 = n.y - h/2;
      n.x2 = n.x + w/2;
      n.y2 = n.y + h/2;
      if(n.selected){
        g.setColor(selectColor);
      }
      else{
        g.setColor(nodeColor);
      }
      g.fillRect((int)n.x1,(int)n.y1,(int)w,(int)h);
      g.setColor(Color.black);
      g.drawRect((int)n.x1,(int)n.y1,(int)w-1,(int)h-1);
      double sx = n.x - (w-10)/2;
      double sy = n.y - (h-5)/2 + fm.getAscent();
      g.drawString(n.lbl,(int)sx,(int)sy);

      nodes.setElementAt(n,i);
    }
  }


}